  class JPFCVA01Calculation:
    def __init__(self,cl_FileProcessor):
        self.directory = cl_FileProcessor.directory
        self.IndexVTId = cl_FileProcessor.IndexVTId
        self.log = cl_FileProcessor.log
        self.IndexSpecificData = cl_FileProcessor.dict_FileData["VTIndexSpecificData"]
        self.IndexSpecificData.to_csv("IndexSpecificdata_JPFCVA.csv")
        self.OpenComp = cl_FileProcessor.dict_FileData["VTOpenComposition"]
        self.OpenComp.to_csv("OpenComp_JPFCVA.csv")
        self.CloseComp = cl_FileProcessor.dict_FileData["VTCloseComposition"]
        self.CloseComp.to_csv("CloseComp_JPFCVA.csv")    
        self.DailyPrices = cl_FileProcessor.dict_FileData["VTDailyPrices"]
        self.DailyPrices.to_csv("DailyPrices_JPFCVA.csv")
        self.DailyPrices["PriceDate"] = pd.to_datetime(self.DailyPrices["PriceDate"])
        self.IndexSpecificData["PriceDate"] = pd.to_datetime(self.IndexSpecificData["PriceDate"])
        self.RunDate = cl_FileProcessor.RunDate
        self.LastRunDate = cl_FileProcessor.LastRunDate
        
    def Price(self,PTPriceTicker):
        return self.DailyPrices.loc[(self.DailyPrices["GenericTicker"]==PTPriceTicker)&(self.DailyPrices["PriceDate"]==self.RunDate),"Price"].values[0]
    def Signal(self,STPriceTick,PTPriceTick):
        #We will put it in Index Specifix Data for Flip
        dic={"AUD WMCO Curncy":-1,"CAD WMCO Curncy":1,"EUR WMCO Curncy":-1,"GBP WMCO Curncy":-1,"JPY WMCO Curncy":1,"NOK WMCO Curncy":1,"NZD WMCO Curncy":-1,"SEK WMCO Curncy":1}
        return np.log(self.Price(PTPriceTick)/(self.Price(STPriceTick)**dic[STPriceTick]))

    def Weight(self):
        dic_temp={}
        dic_1={}
        STicker=sorted(self.DailyPrices.loc[(self.DailyPrices["PriceDate"]==self.LastRunDate)&(self.DailyPrices["SpecificInstrumentVTId"].str.contains(':WM')),"SpecificTicker"])
#        STicker=["AUD WMCO Curncy","CAD WMCO Curncy","EUR WMCO Curncy","GBP WMCO Curncy","JPY WMCO Curncy","NOK WMCO Curncy","NZD WMCO Curncy","SEK WMCO Curncy"]
        PTicker=["PPP_AS_Index","PPP_CA_Index","PPP_EUAR_Index","PPP_UK_Index","PPP_JN_Index","PPP_NO_Index","PPP_NZ_Index","PPP_SW_Index","PPP_US_Index"]
        final=list(zip(STicker,PTicker))
        for ST,PT in final:
#            key=self.DailyPrices.loc[(self.DailyPrices["GenricTicker"]==ST)&(self.DailyPrices["PriceDate"]==self.RunDate),"GenricTicker"].values[0]
            dic_temp.update({ST:self.Signal(ST,PT)})
        Average=np.average(list(dic_temp.values()))
        for ST in STicker:
            dic_1.update({ST:dic_temp[ST]*Average})
        print("dic_temp",dic_temp)
        print("dic_1",dic_1)
        return dic_1
        
    def Weight_abs2(self):
        dic_2={}
        STicker=sorted(self.DailyPrices.loc[(self.DailyPrices["PriceDate"]==self.LastRunDate)&(self.DailyPrices["SpecificInstrumentVTId"].str.contains(':WM')),"SpecificTicker"])
        abs_lis=[abs(i) for i in list(self.Weight().values())]
        for i in STicker:
            dic_2.update({i:(4/max(4,sum(abs_lis)*self.Weight()[i]))})
            if dic_2[i]<0:
                dic_2[i]=max(-1,dic_2[i])
            else:
                dic_2[i]=min(1,dic_2[i])
        print(dic_2)
        return dic_2
    def Tracker_ret(self,GenTicker):
        P_t=self.DailyPrices.loc[(self.DailyPrices["GenericTicker"]==GenTicker)&(self.DailyPrices["PriceDate"]==self.RunDate),"Price"].values[0]
        P_t_1=self.DailyPrices.loc[(self.DailyPrics["GenericTicker"]==GenTicker)&(self.DailyPrices["PriceDate"]==self.LastRunDate),"Price"].values[0]
        return (P_t/P_t_1-1)
    def Tracker_Return(self):
        dic_3={}
        Tracker_Ticker=sorted(self.DailyPrices[(self.DailyPrices["PriceDate"]==self.LastRunDate)&(self.DailyPrices["SpecificInstrumentVTId"].str.contain("X:JP")),"SpecificTicker"])
        STicker=sorted(self.DailyPrices.loc[(self.DailyPrices["PriceDate"]==self.LastRunDate)&(self.DailyPrices["SpecificInstrumentVTId"].str.contains(':WM')),"SpecificTicker"])
        final_2=list(zip(STicker,Tracker_Ticker))
        for i,j in final_2:
            dic_3.update({i:self.Tracker_ret(j)})
        print("dic_3",dic_3)
        return dic_3
        
    def IndexLevel(self):
        STicker=sorted(self.DailyPrices.loc[(self.DailyPrices["PriceDate"]==self.LastRunDate)&(self.DailyPrices["SpecificInstrumentVTId"].str.contains(':WM')),"SpecificTicker"])
        print("IndexLevel",sum(self.Weight_abs2()[x]*self.Tracker_Return()[x] for x in STicker))
        return sum(self.Weight_abs2()[x]*self.Tracker_Return()[x] for x in STicker)
        
    def CashUnits(self):
        IL_1=self.IndexSpecificData.loc[self.IndexSpecificData["PriceDate"]==self.LastRunDate,"IndexLevel"].values[0]
        IL_2=self.IndexSpecificData.loc[self.IndexSpecificData["PriceDate"]!=self.LastRunDate,"IndexLevel"].values[0]
        return IL_1-sum(self.Weight_abs2().values())*IL_2

     
    def Weights_1(self,ticker):
        return self.IndexSpecificData.loc[self.IndexSpecificData["GenericTicker"]==ticker,"Weights"].values[0]
        
            
    def NewCloseComposition(self):
        IL_1=self.IndexSpecificData.loc[self.IndexSpecificData["PriceDate"]==self.LastRunDate,"IndexLevel"].values[0]
        t_NewCloseComposition = self.OpenComposition.copy()
        t_NewCloseComposition["Date"] = self.RunDate
        t_NewOpenComposition.loc[~t_NewOpenComposition['InstrumentVTId'].str.contains('Ca:'),'Units'] = IL_1*t_NewOpenComposition.loc[~t_NewOpenComposition['InstrumentVTId'].str.contains('Ca:'),'GenericTicker'].apply((lambda x:self.Weights_1(x)))/\
        t_NewOpenComposition.loc[t_NewOpenComposition['InstrumentVTId'].str.contains('Ca:'),'Units']=self.CashUnits()                                                                                                    t_NewOpenComposition.loc[~t_NewOpenComposition['InstrumentVTId'].str.contains('Ca:'),'Price']
#        EFX = self.Price("EUR WMCO Curncy",self.RunDate)
        return t_NewCloseComposition

    def NewOpenComposition(self):
#        IL_1=self.IndexSpecificData.loc[self.IndexSpecificData["PriceDate"]==self.LastRunDate,"IndexLevel"].values[0]
        t_NewOpenComposition = self.OpenComposition.copy()
        t_NewOpenComposition["Date"] = self.RunDate
#        EFX_1 = self.Price("EUR WMCO Curncy",self.LastRunDate)
        return t_NewOpenComposition

    def OpenIndexSpecific(self):
        t_indexspecificdata = self.IndexSpecificData.loc[self.IndexSpecificData["PriceDate"]==self.LastRunDate,:].copy()
        t_indexspecificdata["PriceDate"] = self.RunDate
        t_indexspecificdata["IndexLevel"] = self.IndexLevel()
        temp_dic=self.Weight()
        for i in list(self.Weight().keys()):
            temp_dic["JTRD"+i[0:3]]=temp_dic[i]
            del temp_dic[i]
        print(temp_dic)
        t_Indexspecificdata["Weights"]=t_Indexspecificdata["GenericTicker"].map(temp_dic)
        return t_indexspecificdata   
    
    
            
    
               
        
    @hp.output_file(["VTCloseComposition"])
    def fn_VTCloseComp(self):
        return [self.NewCloseComposition()]
    
    @hp.output_file(["VTOpenComposition", "VTIndexSpecificData"])
    def fn_VTOpenComp(self):
        return [self.NewCloseComposition(),self.OpenIndexSpecificData()]
